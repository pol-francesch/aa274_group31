// Generated by gencpp from file aa274a_s2/MyMessage.msg
// DO NOT EDIT!


#ifndef AA274A_S2_MESSAGE_MYMESSAGE_H
#define AA274A_S2_MESSAGE_MYMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aa274a_s2
{
template <class ContainerAllocator>
struct MyMessage_
{
  typedef MyMessage_<ContainerAllocator> Type;

  MyMessage_()
    : mic(false)
    , s()
    , f(0.0)
    , c(0)
    , idx(0)  {
    }
  MyMessage_(const ContainerAllocator& _alloc)
    : mic(false)
    , s(_alloc)
    , f(0.0)
    , c(0)
    , idx(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mic_type;
  _mic_type mic;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _s_type;
  _s_type s;

   typedef double _f_type;
  _f_type f;

   typedef uint8_t _c_type;
  _c_type c;

   typedef int64_t _idx_type;
  _idx_type idx;





  typedef boost::shared_ptr< ::aa274a_s2::MyMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aa274a_s2::MyMessage_<ContainerAllocator> const> ConstPtr;

}; // struct MyMessage_

typedef ::aa274a_s2::MyMessage_<std::allocator<void> > MyMessage;

typedef boost::shared_ptr< ::aa274a_s2::MyMessage > MyMessagePtr;
typedef boost::shared_ptr< ::aa274a_s2::MyMessage const> MyMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aa274a_s2::MyMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aa274a_s2::MyMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aa274a_s2::MyMessage_<ContainerAllocator1> & lhs, const ::aa274a_s2::MyMessage_<ContainerAllocator2> & rhs)
{
  return lhs.mic == rhs.mic &&
    lhs.s == rhs.s &&
    lhs.f == rhs.f &&
    lhs.c == rhs.c &&
    lhs.idx == rhs.idx;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aa274a_s2::MyMessage_<ContainerAllocator1> & lhs, const ::aa274a_s2::MyMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aa274a_s2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::aa274a_s2::MyMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aa274a_s2::MyMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aa274a_s2::MyMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aa274a_s2::MyMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aa274a_s2::MyMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aa274a_s2::MyMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aa274a_s2::MyMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c584acd7d9101176cedf5e6e01732f5";
  }

  static const char* value(const ::aa274a_s2::MyMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c584acd7d910117ULL;
  static const uint64_t static_value2 = 0x6cedf5e6e01732f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::aa274a_s2::MyMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa274a_s2/MyMessage";
  }

  static const char* value(const ::aa274a_s2::MyMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aa274a_s2::MyMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool mic\n"
"string s\n"
"float64 f\n"
"char c\n"
"int64 idx\n"
;
  }

  static const char* value(const ::aa274a_s2::MyMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aa274a_s2::MyMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mic);
      stream.next(m.s);
      stream.next(m.f);
      stream.next(m.c);
      stream.next(m.idx);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MyMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aa274a_s2::MyMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aa274a_s2::MyMessage_<ContainerAllocator>& v)
  {
    s << indent << "mic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mic);
    s << indent << "s: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.s);
    s << indent << "f: ";
    Printer<double>::stream(s, indent + "  ", v.f);
    s << indent << "c: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.c);
    s << indent << "idx: ";
    Printer<int64_t>::stream(s, indent + "  ", v.idx);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AA274A_S2_MESSAGE_MYMESSAGE_H
